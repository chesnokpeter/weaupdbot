from pyowm import OWM
from pyowm.utils.config import get_default_config
import telebot
from telebot import *
from telebot import types
import requests
import datetime
# ---------- owm param ---------- 
config_dict = get_default_config()
config_dict["language"] = "RU"
config_dict['connection']['use_ssl'] = False
config_dict['connection']["verify_ssl_certs"] = False
owm = OWM('a99967bc9ee70d5b4bd387902982f400')
mgr = owm.weather_manager()
# ---------- other param ----------
bot = telebot.TeleBot("key")
headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36'}
# ---------- function param ----------
def getWeatherto (weather, times):
    global resultGetWeatherTo
    def futo(el):
        splitArray = el['dt_txt'].split(' ')
        time = splitArray[1]
        if time == times:
            return True
        else:
            return False
    resultGetWeatherTo = list(filter(futo, weather['list']))
def uuuuuu(m, n):
    global a, b, c, d, icon
    a = m[n]['weather'][0]['description'] #–æ–ø–∏—Å–∞–Ω–∏–µ
    b = round(m[n]['main']['temp'], 1)    #–≥—Ä–∞–¥—É—Å—ã
    c = round(m[n]['wind']['speed'], 0)   #–≤–µ—Ç–µ—Ä
    d = m[n]['main']['humidity']          #–≤–ª–∞–∂–Ω–æ—Å—Ç—å
    icon = m[n]['weather'][0]['icon']     #–∏–∫–æ–Ω–∫–∞

print("Go!")
# ---------- start ----------
if __name__=='__main__':
    while True:
        try:
            @bot.inline_handler(lambda query: len(query.query) > 0)
            def query_text(inline_query):
                # ----- param -----
                ntt = inline_query.query
                hour = str(datetime.datetime.now())
                hour = hour.split(' ')
                hour = hour[1].split(':')
                getTime = int(hour[0])
                try:
                    f = open('forecast_database.txt', 'a', encoding = 'utf-8')
                    f.write(f'{datetime.datetime.now()}    {inline_query.from_user.first_name} {inline_query.from_user.last_name} (@{inline_query.from_user.username})    {ntt}\n')
                    f.close()
                    # ----- param -----
                    observation = mgr.weather_at_place(ntt)
                    w = observation.weather
                    temp = w.temperature('celsius')["temp"]
                    wind = w.wind()['speed']
                    # ----- requests -----
                    response = requests.get(f'http://api.openweathermap.org/data/2.5/weather?q={ntt}&lang=ru&units=metric&appid=6623f2d9bf88a6f45c7f0b2c828aa328', headers=headers)
                    current = response.json()
                    icon = current["weather"][0]['icon']
                    fore = requests.get(f'http://api.openweathermap.org/data/2.5/forecast?q={ntt}&appid=6623f2d9bf88a6f45c7f0b2c828aa328&lang=ru&units=metric&cnt=40', headers=headers)
                    forecast = fore.json()

                    r = types.InlineQueryResultArticle(
                        '1', 
                        f"–°–µ–π—á–∞—Å {round(temp, 1)} ¬∞–°",
                        types.InputTextMessageContent(f'‚≠êÔ∏è –í –≥–æ—Ä–æ–¥–µ {ntt}\n\n‚òÅÔ∏è –°–µ–π—á–∞—Å {w.detailed_status}\nüí° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {round(temp, 1)}¬∞ –°\nüå¨ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ä—Ç—Ä–∞: {round(wind, 0)} –º/—Å\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {w.humidity}%'),
                        description=f"‚òÅÔ∏è {w.detailed_status}\nüå¨ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {round(wind, 0)} –º/—Å",
                        thumb_url=f"http://openweathermap.org/img/wn/{icon}.png"
                    )
                    # ----- forecasts -----
                    if getTime <= 12:
                        getWeatherto(forecast, '12:00:00')
                        uuuuuu(resultGetWeatherTo, 0)
                        r2 = types.InlineQueryResultArticle(
                            '2', 
                            f"–°–µ–≥–æ–¥–Ω—è –¥–Ω—ë–º {b} ¬∞–°",
                            types.InputTextMessageContent(f'‚≠êÔ∏è –í –≥–æ—Ä–æ–¥–µ {ntt}\n\n‚òÅÔ∏è –°–µ–≥–æ–¥–Ω—è –¥–Ω—ë–º {a}\nüí° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {b}¬∞ –°\nüå¨ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {c} –º/—Å\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {d}%'),
                            description=f"‚òÅÔ∏è {a}\nüå¨ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {c} –º/—Å",
                            thumb_url=f"https://openweathermap.org/img/wn/{icon}.png"
                        )
                        getWeatherto(forecast, '18:00:00')
                        uuuuuu(resultGetWeatherTo, 0)
                        r3 = types.InlineQueryResultArticle(
                            '3', 
                            f"–°–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º {b} ¬∞–°",
                            types.InputTextMessageContent(f'‚≠êÔ∏è –í –≥–æ—Ä–æ–¥–µ {ntt}\n\n‚òÅÔ∏è –°–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º {a}\nüí° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {b}¬∞ –°\nüå¨ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {c} –º/—Å\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {d}%'),
                            description=f"‚òÅÔ∏è {a}\nüå¨ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {c} –º/—Å",
                            thumb_url=f"https://openweathermap.org/img/wn/{icon}.png"
                        )
                    # --
                    elif 12 < getTime <= 18:
                        getWeatherto(forecast, '18:00:00')         
                        uuuuuu(resultGetWeatherTo, 0)
                        r2 = types.InlineQueryResultArticle(
                            '2', 
                            f"–°–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º {b} ¬∞–°",
                            types.InputTextMessageContent(f'‚≠êÔ∏è –í –≥–æ—Ä–æ–¥–µ {ntt}\n\n‚òÅÔ∏è –°–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º {a}\nüí° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {b}¬∞ –°\nüå¨ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {c} –º/—Å\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {d}%'),
                            description=f"‚òÅÔ∏è {a}\nüå¨ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {c} –º/—Å",
                            thumb_url=f"https://openweathermap.org/img/wn/{icon}.png"
                        )
                        getWeatherto(forecast, '00:00:00')
                        uuuuuu(resultGetWeatherTo, 0)
                        r3 = types.InlineQueryResultArticle(
                            '3', 
                            f"–°–µ–≥–æ–¥–Ω—è –Ω–æ—á—å—é {b} ¬∞–°",
                            types.InputTextMessageContent(f'‚≠êÔ∏è –í –≥–æ—Ä–æ–¥–µ {ntt}\n\n‚òÅÔ∏è –°–µ–≥–æ–¥–Ω—è –Ω–æ—á—å—é {a}\nüí° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {b}¬∞ –°\nüå¨ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {c} –º/—Å\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {d}%'),
                            description=f"‚òÅÔ∏è {a}\nüå¨ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {c} –º/—Å",
                            thumb_url=f"https://openweathermap.org/img/wn/{icon}.png"
                        )
                    # --
                    elif 18 < getTime <= 24:                       
                        getWeatherto(forecast, '00:00:00')
                        uuuuuu(resultGetWeatherTo, 0)
                        r2 = types.InlineQueryResultArticle(
                            '2', 
                            f"–°–µ–≥–æ–¥–Ω—è –Ω–æ—á—å—é {b} ¬∞–°",
                            types.InputTextMessageContent(f'‚≠êÔ∏è –í –≥–æ—Ä–æ–¥–µ {ntt}\n\n‚òÅÔ∏è –°–µ–≥–æ–¥–Ω—è –Ω–æ—á—å—é {a}\nüí° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {b}¬∞ –°\nüå¨ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {c} –º/—Å\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {d}%'),
                            description=f"‚òÅÔ∏è {a}\nüå¨ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {c} –º/—Å",
                            thumb_url=f"https://openweathermap.org/img/wn/{icon}.png"
                        )
                        r3 = types.InlineQueryResultArticle(
                            '3', 
                            "–ú–µ—Å—Ç–æ –¥–ª—è –≤–∞—à–µ–π —Ä–µ–∫–ª–∞–º—ã",
                            types.InputTextMessageContent('–ú–µ—Å—Ç–æ –¥–ª—è –≤–∞—à–µ–π —Ä–µ–∫–ª–∞–º—ã'),
                            description="–ú–µ—Å—Ç–æ –¥–ª—è –≤–∞—à–µ–π —Ä–µ–∫–ª–∞–º—ã",
                            thumb_url="https://cdn.discordapp.com/attachments/851529739843534889/1059187408287047821/logo.png"
                        )
                    # --
                    # ----- tomorrow -----
                    getWeatherto(forecast, '12:00:00')
                    uuuuuu(resultGetWeatherTo, 1)
                    r4 = types.InlineQueryResultArticle(
                        '4', 
                        f"–ó–∞–≤—Ç—Ä–∞ –¥–Ω—ë–º {b} ¬∞–°",
                        types.InputTextMessageContent(f'‚≠êÔ∏è –í –≥–æ—Ä–æ–¥–µ {ntt}\n\n‚òÅÔ∏è –ó–∞–≤—Ç—Ä–∞ –¥–Ω—ë–º {a}\nüí° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {b}¬∞ –°\nüå¨ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {c} –º/—Å\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {d}%'),
                        description=f"‚òÅÔ∏è {a}\nüå¨ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {c} –º/—Å",
                        thumb_url=f"https://openweathermap.org/img/wn/{icon}.png"
                    )
                    # ----- after tomorrow -----
                    uuuuuu(resultGetWeatherTo, 2)
                    r5 = types.InlineQueryResultArticle(
                        '5', 
                        f"–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ –¥–Ω—ë–º {b} ¬∞–°",
                        types.InputTextMessageContent(f'‚≠êÔ∏è –í –≥–æ—Ä–æ–¥–µ {ntt}\n\n‚òÅÔ∏è –ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ –¥–Ω—ë–º {a}\nüí° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {b}¬∞ –°\nüå¨ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {c} –º/—Å\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {d}%'),
                        description=f"‚òÅÔ∏è {a}\nüå¨ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {c} –º/—Å",
                        thumb_url=f"https://openweathermap.org/img/wn/{icon}.png"
                    )

                    bot.answer_inline_query(inline_query.id, [r, r2, r3, r4, r5])
                except:
                    # ----- error -----
                    x = types.InlineQueryResultArticle(
                        '1', 
                        f"–ì–æ—Ä–æ–¥ \"{ntt}\" –Ω–µ –Ω–∞–π–¥–µ–Ω",
                        types.InputTextMessageContent('–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω'),
                    )
                    bot.answer_inline_query(inline_query.id, [x])
            # ---------- commands ----------
            @bot.message_handler(commands=['start'])
            def start_message(message):
                f = open('main_database.txt', 'a', encoding = 'utf-8')
                f.write(f'{datetime.datetime.now()}    {message.from_user.first_name} {message.from_user.last_name} (@{message.from_user.username})    /start\n')
                f.close()
                markup = types.InlineKeyboardMarkup()
                button1 = types.InlineKeyboardButton("–ò—Å–∫–∞—Ç—å", switch_inline_query_current_chat="")
                markup.add(button1)
                bot.send_message(message.chat.id, text=f'üëã –ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}!\n\nüîç–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ ‚òÅÔ∏è–ø–æ–≥–æ–¥—É –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µüëá \n\n‚úÖ:  \"@weaupdbot –±–µ–ª–≥–æ—Ä–æ–¥\"\n‚ùå :  \"@weaupdbot–±–µ–ª–≥–æ—Ä–æ–¥\"\n\nüë§–¢–∞–∫–∂–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –¥–∏–∞–ª–æ–≥–∞—Ö\n\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º ‚Äî @chesnokpeter', reply_markup=markup)

            @bot.message_handler(commands=['check'])
            def start_message(message):
                f = open('main_database.txt', 'a', encoding = 'utf-8')
                f.write(f'{datetime.datetime.now()}    {message.from_user.first_name} {message.from_user.last_name} (@{message.from_user.username})    /check\n')
                f.close()
                bot.send_message(message.chat.id, "–Ø —Ä–∞–±–æ—Ç–∞—é")

            @bot.message_handler(commands=['about'])
            def start_message(message):
                f = open('main_database.txt', 'a', encoding = 'utf-8')
                f.write(f'{datetime.datetime.now()}    {message.from_user.first_name} {message.from_user.last_name} (@{message.from_user.username})    /about\n')
                f.close()
                bot.send_message(message.chat.id, "–≠—Ç–æ –±–æ—Ç —Å –∫–æ—Ç–æ—Ä—ã–º —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å üë•–ª—é–¥—è–º –ø–æ–≥–æ–¥—É ‚õÖÔ∏è\n\nby_ @chesnokpeter")

            @bot.message_handler(commands=['file'])
            def start_message(message):
                f = open('main_database.txt', 'a', encoding = 'utf-8')
                f.write(f'{datetime.datetime.now()}    {message.from_user.first_name} {message.from_user.last_name} (@{message.from_user.username})    /file\n')
                f.close()
                bot.send_message(821785013, "main_database")
                f = open('main_database.txt', 'rb')
                bot.send_document(821785013, f)
                bot.send_message(821785013, "forecast_database")
                f = open('forecast_database.txt', 'rb')
                bot.send_document(821785013, f)

            @bot.message_handler(content_types=['text'])
            def send_echo(message):
                f = open('main_database.txt', 'a', encoding = 'utf-8')
                f.write(f'{datetime.datetime.now()}    {message.from_user.first_name} {message.from_user.last_name} (@{message.from_user.username})    {message.text}\n')
                f.close()

            # @bot.message_handler(content_types=['text'])
            # def send_echo(message):
            #     try:
            #         observation = mgr.weather_at_place(message.text)
            #         w = observation.weather
            #         temp = w.temperature('celsius')["temp"]
            #         wind = w.wind()['speed']
            #         answer = f"‚≠êÔ∏è –í –≥–æ—Ä–æ–¥–µ {message.text}\n\n‚òÅÔ∏è –°–µ–π—á–∞—Å {w.detailed_status}\nüí° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {round(temp, 1)}¬∞ –°\nüå¨ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ä—Ç—Ä–∞: {round(wind, 0)} –º/—Å\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {w.humidity}%"
            #     except:
            #         answer = "–æ—à—ã–±–∫–∞"
            #     finally:
            #         bot.send_message(message.chat.id, answer)

            bot.polling(none_stop=True, interval=0)
        except Exception as e:
            print(datetime.datetime.now())
            print(e)
            print("–æ—à–∏–±–∫–∞")
            continue
